<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>catchmind</title>
  <link rel="stylesheet" href="painter.css">
  <!-- for nes.css framework -->
  <link href="https://fonts.googleapis.com/css?family=Press+Start+2P" rel="stylesheet">
  <link href="https://unpkg.com/nes.css/css/nes.css" rel="stylesheet" />

  <!-- for Korean retro font -->
  <link rel="stylesheet" href="//cdn.jsdelivr.net/gh/neodgm/neodgm-webfont@latest/neodgm/style.css">
  
</head>
<body>

  <div class="wrapper">
    <div class="info-container">
      <a href="/" class="nes-badge" id="nes-badge">
        <span style="left: 0;" class="is-warning">BACK</span>
      </a>    
      <i class="nes-ash" id="nes-ash"></i>
      <div class="nes-container is-rounded" id="game-title">
        CatchMind !<br>
        <i class="snes-jp-logo"></i>
      </div>
      <div class="nes-container with-title is-dark" id="score-board">
        <div class="title" id="board-title">SCORE BOARD</div>
        <div id="Seoul-uni" style="display: flex; justify-content: center; align-items: center; color: white;font-size: 20px; margin-top: 15px;">SCORE :<span id="score" style="display: flex; justify-content: center; align-items: center; font-size: 20px;">0</span></div>
      </div>
    </div>

    <div class="game__box">
      <div class="seperate">
        <div style="display: flex; flex-direction: row; align-items: baseline; justify-content: space-between;">
          <div style="display: flex; align-items: center;">
            <h2 style="font-family:'NeoDunggeunmo';">키워드 &nbsp</h2>
            <span style="font-family:'NeoDunggeunmo';" id='solution'></span>
          </div>
          <button style="font-family:'NeoDunggeunmo';" class="nes-btn is-warning" onclick="eraseAll()">모두 지우기</button>
        </div>
        <div class="left-time">남은시간: </div>
        <div id='time'></div>  
          <canvas id="jsCanvas"></canvas>
          <!-- <button onclick="sendMessage()">전송</button> -->
        </div>
        <ul id='message-list'>
        </ul>
      </div>
    </div>


  <script src="/socket.io/socket.io.js"></script>

  <script>
    console.log('start')
    var socket = io();

    var id = "<%= id %>"
    socket.emit('catchmind/painter-enter', {'id': id})

    socket.on('catchmind/solution', (data) => {
      document.getElementById('solution').innerText = data['solution']
    })

    socket.on('catchmind/time-left', (data) => {
      document.getElementById('time').innerText = data['timeLeft']
    })
    socket.on('catchmind/expire', (_) => {
      console.log('expire')

      let li = document.createElement('li')
      li.innerHTML = '시간초과! 새로고침하세요'
      document.getElementById('message-list').appendChild(li)

      socket.disconnect()
    })
    socket.on('catchmind/right-answer', (data) => {
      console.log('right-answer')

      let li = document.createElement('li')
      li.innerHTML = '정답! 새로고침하세요'
      document.getElementById('message-list').appendChild(li)
      socket.disconnect()
    })

    const sendMessage = (_) => {
      const content = document.getElementById('input-box').value
      socket.emit('catchmind/send-message', {'content': content })
    }

    const eraseAll = () => {
      socket.emit('catchmind/erase-all');
    }

    socket.on('catchmind/erase-all', () => {
      const canvas = document.getElementById("jsCanvas");
      if (canvas) {
        const ctx = canvas.getContext("2d");
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.beginPath()
      }
    })

    socket.on('catchmind/send-message', (data) => {
      console.log('catchmind/send-message');
      const content = data['content'];

      let li = document.createElement('li')
      li.innerHTML = data['content']
      document.getElementById('message-list').appendChild(li)
    })

    // canvas
    const canvas = document.getElementById("jsCanvas");
    const ctx = canvas.getContext("2d");

    canvas.width = 500;
    canvas.height = 500;

    ctx.strokeStyle = "black";
    ctx.lineWidth = 2.5;

    let painting = false;

    if (canvas) {
      canvas.addEventListener("mousemove", (event) => {
        const x = event.offsetX;
        const y = event.offsetY;

        if(!painting) {
          ctx.beginPath();
          ctx.moveTo(x, y);
          socket.emit('catchmind/not-painting', {x: event.offsetX, y: event.offsetY});
        }
        else {
          ctx.lineTo(x, y);
          ctx.stroke();
          socket.emit('catchmind/painting', {x: event.offsetX, y: event.offsetY});
        }
      });
      canvas.addEventListener("mousedown", () => {
        painting=true;
      });
      canvas.addEventListener("mouseup", () => {
        painting=false;
      });
      canvas.addEventListener("mouseleave", () => {
        painting=false;
      });
    }
  </script>
</body>
